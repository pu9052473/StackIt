// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  USER
  ADMIN
}

model Package {
  id       Int      @id @default(autoincrement())
  name     String
  price    Int
  features String[]

  user User[]
}

model User {
  id          String   @id @default(cuid())
  name        String?
  email       String   @unique
  location    String?
  profession  String?
  age         Int?
  about       String?
  socialLinks Json[] //title , link
  packageId   Int      @default(1)
  role        ROLE     @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projects                 Project[]
  validationBrainstormChat validationBrainstormChat[]

  package Package @relation(fields: [packageId], references: [id])
}

model EarlyAccess {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
}

model Validation {
  id                       String                     @id @default(uuid())
  projectId                String
  title                    String // e.g., "Market Demand", "Competitor Analysis"
  summary                  String // Short one-liner result e.g., "High demand detected"
  explanation              String // Detailed AI explanation about the points
  confidence               Float // AI confidence score (0-1) e.g., 0.85 for 85%
  isPassed                 Boolean // Whether AI considers this point as passed or concerning
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  validationBrainstormChat validationBrainstormChat[]
  // Relations
  project                  Project                    @relation(fields: [projectId], references: [id])
}

model validationBrainstormChat {
  id           Int    @id @default(autoincrement())
  projectId    String
  validationId String
  userId       String
  type         String // ai, user
  content      String

  validation Validation @relation(fields: [validationId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  project    Project    @relation(fields: [projectId], references: [id])
  updatedAt  DateTime   @updatedAt
  createdAt  DateTime   @default(now())
}

model Project {
  id                String   @id @default(uuid())
  userId            String
  title             String
  isPrivate         Boolean  @default(false)
  imageUrl          String?
  problem           String?
  ideaDescription   String?
  targetAudience    String?
  desiredOutcome    String?
  competitorCheck   Boolean? @default(false)
  monetizationCheck Boolean? @default(false)
  riskCheck         Boolean? @default(false)
  aiSummary         String? //this will be projects summary generated by AI for history tracking.
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  validationBrainstormChat validationBrainstormChat[]
  user                     User                       @relation(fields: [userId], references: [id])
  validations              Validation[] // Link to validation points
}
